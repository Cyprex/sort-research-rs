partition_impl!("sum_lookup");

const INDEX_LOOKUP_MAP: [(u64, u8); 256] = [
    (0x0000000000000000, 0),
    (0x0000000000000000, 1),
    (0x0000000000000001, 1),
    (0x0000000000000100, 2),
    (0x0000000000000002, 1),
    (0x0000000000000200, 2),
    (0x0000000000000201, 2),
    (0x0000000000020100, 3),
    (0x0000000000000003, 1),
    (0x0000000000000300, 2),
    (0x0000000000000301, 2),
    (0x0000000000030100, 3),
    (0x0000000000000302, 2),
    (0x0000000000030200, 3),
    (0x0000000000030201, 3),
    (0x0000000003020100, 4),
    (0x0000000000000004, 1),
    (0x0000000000000400, 2),
    (0x0000000000000401, 2),
    (0x0000000000040100, 3),
    (0x0000000000000402, 2),
    (0x0000000000040200, 3),
    (0x0000000000040201, 3),
    (0x0000000004020100, 4),
    (0x0000000000000403, 2),
    (0x0000000000040300, 3),
    (0x0000000000040301, 3),
    (0x0000000004030100, 4),
    (0x0000000000040302, 3),
    (0x0000000004030200, 4),
    (0x0000000004030201, 4),
    (0x0000000403020100, 5),
    (0x0000000000000005, 1),
    (0x0000000000000500, 2),
    (0x0000000000000501, 2),
    (0x0000000000050100, 3),
    (0x0000000000000502, 2),
    (0x0000000000050200, 3),
    (0x0000000000050201, 3),
    (0x0000000005020100, 4),
    (0x0000000000000503, 2),
    (0x0000000000050300, 3),
    (0x0000000000050301, 3),
    (0x0000000005030100, 4),
    (0x0000000000050302, 3),
    (0x0000000005030200, 4),
    (0x0000000005030201, 4),
    (0x0000000503020100, 5),
    (0x0000000000000504, 2),
    (0x0000000000050400, 3),
    (0x0000000000050401, 3),
    (0x0000000005040100, 4),
    (0x0000000000050402, 3),
    (0x0000000005040200, 4),
    (0x0000000005040201, 4),
    (0x0000000504020100, 5),
    (0x0000000000050403, 3),
    (0x0000000005040300, 4),
    (0x0000000005040301, 4),
    (0x0000000504030100, 5),
    (0x0000000005040302, 4),
    (0x0000000504030200, 5),
    (0x0000000504030201, 5),
    (0x0000050403020100, 6),
    (0x0000000000000006, 1),
    (0x0000000000000600, 2),
    (0x0000000000000601, 2),
    (0x0000000000060100, 3),
    (0x0000000000000602, 2),
    (0x0000000000060200, 3),
    (0x0000000000060201, 3),
    (0x0000000006020100, 4),
    (0x0000000000000603, 2),
    (0x0000000000060300, 3),
    (0x0000000000060301, 3),
    (0x0000000006030100, 4),
    (0x0000000000060302, 3),
    (0x0000000006030200, 4),
    (0x0000000006030201, 4),
    (0x0000000603020100, 5),
    (0x0000000000000604, 2),
    (0x0000000000060400, 3),
    (0x0000000000060401, 3),
    (0x0000000006040100, 4),
    (0x0000000000060402, 3),
    (0x0000000006040200, 4),
    (0x0000000006040201, 4),
    (0x0000000604020100, 5),
    (0x0000000000060403, 3),
    (0x0000000006040300, 4),
    (0x0000000006040301, 4),
    (0x0000000604030100, 5),
    (0x0000000006040302, 4),
    (0x0000000604030200, 5),
    (0x0000000604030201, 5),
    (0x0000060403020100, 6),
    (0x0000000000000605, 2),
    (0x0000000000060500, 3),
    (0x0000000000060501, 3),
    (0x0000000006050100, 4),
    (0x0000000000060502, 3),
    (0x0000000006050200, 4),
    (0x0000000006050201, 4),
    (0x0000000605020100, 5),
    (0x0000000000060503, 3),
    (0x0000000006050300, 4),
    (0x0000000006050301, 4),
    (0x0000000605030100, 5),
    (0x0000000006050302, 4),
    (0x0000000605030200, 5),
    (0x0000000605030201, 5),
    (0x0000060503020100, 6),
    (0x0000000000060504, 3),
    (0x0000000006050400, 4),
    (0x0000000006050401, 4),
    (0x0000000605040100, 5),
    (0x0000000006050402, 4),
    (0x0000000605040200, 5),
    (0x0000000605040201, 5),
    (0x0000060504020100, 6),
    (0x0000000006050403, 4),
    (0x0000000605040300, 5),
    (0x0000000605040301, 5),
    (0x0000060504030100, 6),
    (0x0000000605040302, 5),
    (0x0000060504030200, 6),
    (0x0000060504030201, 6),
    (0x0006050403020100, 7),
    (0x0000000000000007, 1),
    (0x0000000000000700, 2),
    (0x0000000000000701, 2),
    (0x0000000000070100, 3),
    (0x0000000000000702, 2),
    (0x0000000000070200, 3),
    (0x0000000000070201, 3),
    (0x0000000007020100, 4),
    (0x0000000000000703, 2),
    (0x0000000000070300, 3),
    (0x0000000000070301, 3),
    (0x0000000007030100, 4),
    (0x0000000000070302, 3),
    (0x0000000007030200, 4),
    (0x0000000007030201, 4),
    (0x0000000703020100, 5),
    (0x0000000000000704, 2),
    (0x0000000000070400, 3),
    (0x0000000000070401, 3),
    (0x0000000007040100, 4),
    (0x0000000000070402, 3),
    (0x0000000007040200, 4),
    (0x0000000007040201, 4),
    (0x0000000704020100, 5),
    (0x0000000000070403, 3),
    (0x0000000007040300, 4),
    (0x0000000007040301, 4),
    (0x0000000704030100, 5),
    (0x0000000007040302, 4),
    (0x0000000704030200, 5),
    (0x0000000704030201, 5),
    (0x0000070403020100, 6),
    (0x0000000000000705, 2),
    (0x0000000000070500, 3),
    (0x0000000000070501, 3),
    (0x0000000007050100, 4),
    (0x0000000000070502, 3),
    (0x0000000007050200, 4),
    (0x0000000007050201, 4),
    (0x0000000705020100, 5),
    (0x0000000000070503, 3),
    (0x0000000007050300, 4),
    (0x0000000007050301, 4),
    (0x0000000705030100, 5),
    (0x0000000007050302, 4),
    (0x0000000705030200, 5),
    (0x0000000705030201, 5),
    (0x0000070503020100, 6),
    (0x0000000000070504, 3),
    (0x0000000007050400, 4),
    (0x0000000007050401, 4),
    (0x0000000705040100, 5),
    (0x0000000007050402, 4),
    (0x0000000705040200, 5),
    (0x0000000705040201, 5),
    (0x0000070504020100, 6),
    (0x0000000007050403, 4),
    (0x0000000705040300, 5),
    (0x0000000705040301, 5),
    (0x0000070504030100, 6),
    (0x0000000705040302, 5),
    (0x0000070504030200, 6),
    (0x0000070504030201, 6),
    (0x0007050403020100, 7),
    (0x0000000000000706, 2),
    (0x0000000000070600, 3),
    (0x0000000000070601, 3),
    (0x0000000007060100, 4),
    (0x0000000000070602, 3),
    (0x0000000007060200, 4),
    (0x0000000007060201, 4),
    (0x0000000706020100, 5),
    (0x0000000000070603, 3),
    (0x0000000007060300, 4),
    (0x0000000007060301, 4),
    (0x0000000706030100, 5),
    (0x0000000007060302, 4),
    (0x0000000706030200, 5),
    (0x0000000706030201, 5),
    (0x0000070603020100, 6),
    (0x0000000000070604, 3),
    (0x0000000007060400, 4),
    (0x0000000007060401, 4),
    (0x0000000706040100, 5),
    (0x0000000007060402, 4),
    (0x0000000706040200, 5),
    (0x0000000706040201, 5),
    (0x0000070604020100, 6),
    (0x0000000007060403, 4),
    (0x0000000706040300, 5),
    (0x0000000706040301, 5),
    (0x0000070604030100, 6),
    (0x0000000706040302, 5),
    (0x0000070604030200, 6),
    (0x0000070604030201, 6),
    (0x0007060403020100, 7),
    (0x0000000000070605, 3),
    (0x0000000007060500, 4),
    (0x0000000007060501, 4),
    (0x0000000706050100, 5),
    (0x0000000007060502, 4),
    (0x0000000706050200, 5),
    (0x0000000706050201, 5),
    (0x0000070605020100, 6),
    (0x0000000007060503, 4),
    (0x0000000706050300, 5),
    (0x0000000706050301, 5),
    (0x0000070605030100, 6),
    (0x0000000706050302, 5),
    (0x0000070605030200, 6),
    (0x0000070605030201, 6),
    (0x0007060503020100, 7),
    (0x0000000007060504, 4),
    (0x0000000706050400, 5),
    (0x0000000706050401, 5),
    (0x0000070605040100, 6),
    (0x0000000706050402, 5),
    (0x0000070605040200, 6),
    (0x0000070605040201, 6),
    (0x0007060504020100, 7),
    (0x0000000706050403, 5),
    (0x0000070605040300, 6),
    (0x0000070605040301, 6),
    (0x0007060504030100, 7),
    (0x0000070605040302, 6),
    (0x0007060504030200, 7),
    (0x0007060504030201, 7),
    (0x0706050403020100, 8),
];

const UNROLL_SIZE: usize = u8::BITS as usize;

unsafe fn gen_partition_mask<T, F>(block_ptr: *const T, pivot: &T, is_less: &mut F) -> u8
where
    F: FnMut(&T, &T) -> bool,
{
    let mut partition_mask = 0;

    for i in 0..UNROLL_SIZE {
        let elem: &T = unsafe { &*block_ptr.add(i) };
        partition_mask |= (is_less(elem, pivot) as u8).wrapping_shl(i as u32);
    }

    partition_mask
}

#[cfg_attr(feature = "no_inline_sub_functions", inline(never))]
fn partition<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize
where
    F: FnMut(&T, &T) -> bool,
{
    let len = v.len();

    let mut sum = 0;
    let mut elem_ptr = v.as_ptr();

    if len >= UNROLL_SIZE {
        unsafe {
            let unroll_end_ptr = v.as_ptr().add(len - UNROLL_SIZE);

            while elem_ptr < unroll_end_ptr {
                let partition_mask = gen_partition_mask(elem_ptr, pivot, is_less);
                let (x, count) = INDEX_LOOKUP_MAP.get_unchecked(partition_mask as usize);
                sum += *count as usize;

                // To test what loading both lookup values has as perf overhead.
                // Use u64 lookup value.
                sum += (*x == 0x0000000706020100) as usize;

                elem_ptr = elem_ptr.add(UNROLL_SIZE);
            }
        }
    }

    let end_ptr = unsafe { v.as_ptr().add(len) };
    while elem_ptr < end_ptr {
        let elem: &T = unsafe { &*elem_ptr };
        sum += is_less(elem, pivot) as usize;
        elem_ptr = unsafe { elem_ptr.add(1) };
    }

    // let verify_sum = v
    //     .iter()
    //     .map(|elem| is_less(elem, pivot) as usize)
    //     .sum::<usize>();

    // assert_eq!(sum, verify_sum);

    sum
}
